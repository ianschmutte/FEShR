URE <- function(Lambda_chol = NULL, mu, Lambda, y, M, T = 1, Lambda_sp = NULL) {

  if (!is.null(Lambda_chol)) {

  }
  
  if (!is.matrix(y)) {
    y <- matrix(y, nrow = T)
  }

  URE <- 0
  J <- ncol(y_mat)

  if(Lamda_sp == "diag") {

  }
  if (XKB) {
    for (j in 1:J) {
      y_j <- y_mat[, j]
      M_j <- diag(M[[j]])
      inv_Lam_Mj <- 1 / (Lambda + M_j)
      URE_j <- -2 * sum((M_j)^2 * inv_Lam_Mj)
      URE_j <- URE_j + sum((M_j * inv_Lam_Mj *  y_j)^2)
      URE <- URE + URE_j 
    }
  } else {
    for (j in 1:J) {
      y_j <- y_mat[, j]
      M_j <- M[[j]]
      inv_Lam_Mj <- solve(Lambda + M_j)
      URE_j <- -2 * sum(diag(inv_Lam_Mj %*% M_j %*% M_j))
      URE_j <- URE_j + sum((M_j %*% inv_Lam_Mj %*% y_j)^2)
      URE <- URE + URE_j 
    }
  }

  return(URE)
}

URE_L <- function(L, y, M, T) {

  Lambda <- make_from_lowertri(L, T)
  return(SURE(Lambda, y, M, T))
}

oracle_SURE <- function(L, y, M, T, theta) {

  if (length(L) == 1) {
    Lambda <- L
  } else {
    Lambda <- make_from_lowertri(L, T)
  }

  SURE <- 0
  J <- length(M)
  
  for(j in 1:J) {
    diff <- thetahat_Lambda(Lambda, M[[j]], y[, j]) - theta[, j]
    SURE <- SURE + sum(diff^2)
  }
  
  return(SURE)
}

MSE <- function(theta, thetahat) {
  J <- ncol(thetahat)
  sum((theta - thetahat)^2) / J
}

average_MSE <- function(theta, thetahats) {
  Nrep <- length(thetahats)
  MSEs <- sapply(1:Nrep, function(rep) MSE(theta, thetahats[[rep]])) 

  return(mean(MSEs))
}

make_from_lowertri <- function(L, T) {
  L_mat <- matrix(0, nrow = T, ncol = T)
  L_mat[lower.tri(L_mat, diag = TRUE)] <- L
  return(L_mat %*% t(L_mat))
}

thetahat_Lambda <- function(Lambda, Mj, yj, mu = 0) {
  
  if (is.matrix(Lambda)) {
    thetahat <- Lambda %*% solve(Lambda + Mj) %*% yj
  } else {
    Mj <- diag(Mj)
    thetahat <- (Lambda / (Lambda + Mj)) * yj    
  }

  return(thetahat)
}


################################################################################
#################################### DGP #######################################
################################################################################


J <- 100
T <- 4
M <- vector(mode = "list", length = J)
## theta <- matrix(2 * runif(T * J), nrow = T)
## theta <- matrix(rbind(runif((T / 2) * J), 2 * runif((T / 2) * J)), nrow = T)
theta1 <- matrix(rbind(runif(J),
                      .5 * runif(J),
                      1.5 * runif(J),
                      2 * runif(J)),
                nrow = T)

theta2 < matrix(rbind(2 * rnorm(J),
                      .5 * runif(J),
                      1.5 * runif(J),
                      4 * runif(J)),
                nrow = T)

theta <- 

## theta_Js <- 2 * rnorm(J)
## theta_Ts <- rnorm(T)
## theta <- matrix(rep(theta_Js, T), nrow = J)
## theta <- t(theta) + matrix(rep(theta_Ts, J), nrow = T)

for (j in 1:J) {
  L <- matrix(runif(T^2), nrow = T)
  M[[j]] <- t(L) %*% L
  ## M[[j]] <- diag(c(runif(1), runif(1) + .5, 2 * runif(1), runif(1) + 2))
}



################################################################################
############################### Simulations ####################################
################################################################################

Nrep <- 10

thetahat_SURE_list <- vector(mode = "list", length = Nrep)
Lambdas_SURE <- vector(mode = "list", length = Nrep)

thetahat_SURE_list_or <- vector(mode = "list", length = Nrep)
Lambdas_SURE_or <- vector(mode = "list", length = Nrep)

thetahat_SURE_list_XKB <- vector(mode = "list", length = Nrep)
Lambdas_SURE_XKB <- vector(mode = "list", length = Nrep)

thetahat_SURE_list_XKB_or <- vector(mode = "list", length = Nrep)
Lambdas_SURE_XKB_or <- vector(mode = "list", length = Nrep)

ys <- vector(mode = "list", length = Nrep)

for(rep in 1:Nrep) {
  print(rep)

  y <- matrix(NA, nrow = T, ncol = J)

  for(j in 1:J) {
    y[, j] <- mvtnorm::rmvnorm(n = 1, mean = rep(0, T), sigma = M[[j]]) +
      theta[, j]
  }
  ys[[rep]] <- y
  
  L <- optim(par = rep(0, T*(T+1)/2), obj_SURE, y = y, M = M, T = T)$par
  L_or <- optim(par = rep(0, T*(T+1)/2), oracle_SURE, y = y, M = M, T = T,
                theta = theta)$par
  Lambda_SURE_XKB <- optimize(SURE, c(0, 1e05),
                              y = y, M = M, T = T, XKB = TRUE)$min
  Lambda_SURE_XKB_or <- optimize(oracle_SURE, c(0,1e05),
                                 y = y, M = M, T = T, theta = theta)$min
  
  Lambdas_SURE[[rep]] <- Lambda_SURE <- make_from_lowertri(L, T)
  Lambdas_SURE_or[[rep]] <- Lambda_SURE_or <- make_from_lowertri(L_or, T)
  Lambdas_SURE_XKB[[rep]] <- Lambda_SURE_XKB
  Lambdas_SURE_XKB_or[[rep]] <- Lambda_SURE_XKB_or
  
  thetahat_SURE <- matrix(NA, ncol = J, nrow = T)
  thetahat_SURE_or <- matrix(NA, ncol = J, nrow = T)
  thetahat_SURE_XKB <- matrix(NA, ncol = J, nrow = T)
  thetahat_SURE_XKB_or <- matrix(NA, ncol = J, nrow = T)
  
  for(j in 1:J) {
    thetahat_SURE[, j] <- thetahat_Lambda(Lambda_SURE, M[[j]], y[, j])
    thetahat_SURE_or[, j] <- thetahat_Lambda(Lambda_SURE_or, M[[j]], y[, j])
    thetahat_SURE_XKB[, j] <- thetahat_Lambda(Lambda_SURE_XKB, M[[j]], y[, j])
    thetahat_SURE_XKB_or[, j] <- thetahat_Lambda(Lambda_SURE_XKB_or,
                                                 M[[j]], y[, j])
  }
  
  thetahat_SURE_list[[rep]] <- thetahat_SURE
  thetahat_SURE_list_or[[rep]] <- thetahat_SURE_or
  thetahat_SURE_list_XKB[[rep]] <- thetahat_SURE_XKB
  thetahat_SURE_list_XKB_or[[rep]] <- thetahat_SURE_XKB_or
}


SURE_MSE <- average_MSE(theta, thetahat_SURE_list)
SURE_MSE_XKB <- average_MSE(theta, thetahat_SURE_list_XKB)
SURE_MSE_oracle <- average_MSE(theta, thetahat_SURE_list_or)
SURE_MSE_XKB_or <- average_MSE(theta, thetahat_SURE_list_XKB_or)
MLE_MSE <- average_MSE(theta, ys)
MLE_MSE_true <- mean(sapply(1:J, function(j) sum(diag(M[[j]]))))

MSEs <- c(SURE_MSE, SURE_MSE_XKB, SURE_MSE_oracle, SURE_MSE_XKB_or,
          MLE_MSE, MLE_MSE_true)
names(MSEs) <- c("SURE", "SURE XKB", "SURE Oracle", "SURE XKB Oracle",
                 "MLE", "True MLE")

print(MSEs)

### Thinks to try ###
### 1. period-by-period XKB
### 2. homoskedasticity
### 3. prediction

